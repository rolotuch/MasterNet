// <auto-generated />
using System;
using MasterNet.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistencia.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    partial class MasterNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("MasterNet.Dominio.Calificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alumno")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Puntaje")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("calificaciones", (string)null);
                });

            modelBuilder.Entity("MasterNet.Dominio.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("cursos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b6a2a1f-843f-4e76-996a-9fa07476acb6"),
                            Descripcion = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9037),
                            Titulo = "Incredible Cotton Fish"
                        },
                        new
                        {
                            Id = new Guid("66b0c917-40a7-49ff-acd5-8f59eb015d2f"),
                            Descripcion = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9070),
                            Titulo = "Fantastic Concrete Towels"
                        },
                        new
                        {
                            Id = new Guid("ff0929d2-8422-403d-916d-47487a6be84f"),
                            Descripcion = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9093),
                            Titulo = "Ergonomic Frozen Pants"
                        },
                        new
                        {
                            Id = new Guid("f7e842b3-7ac1-437d-8a96-29801f3fb77f"),
                            Descripcion = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9115),
                            Titulo = "Handcrafted Frozen Salad"
                        },
                        new
                        {
                            Id = new Guid("4b039859-f4a5-4590-a152-64b9ab41a9c3"),
                            Descripcion = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9136),
                            Titulo = "Fantastic Concrete Shoes"
                        },
                        new
                        {
                            Id = new Guid("678dc462-44d7-4231-96ac-929d34519124"),
                            Descripcion = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9159),
                            Titulo = "Ergonomic Frozen Towels"
                        },
                        new
                        {
                            Id = new Guid("25fcbb30-fdfd-42c9-a3ae-25b6563cc9ad"),
                            Descripcion = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9194),
                            Titulo = "Generic Steel Shirt"
                        },
                        new
                        {
                            Id = new Guid("5b798506-b19b-40ea-b8a7-68594ae20e70"),
                            Descripcion = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9213),
                            Titulo = "Awesome Frozen Fish"
                        },
                        new
                        {
                            Id = new Guid("b3ee4fe8-b5c6-4400-98ee-5346293a723e"),
                            Descripcion = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            FechaPublicacion = new DateTime(2024, 7, 16, 16, 53, 26, 588, DateTimeKind.Utc).AddTicks(9329),
                            Titulo = "Ergonomic Granite Mouse"
                        });
                });

            modelBuilder.Entity("MasterNet.Dominio.CursoInstructor", b =>
                {
                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CursoId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("cursos_instructores", (string)null);
                });

            modelBuilder.Entity("MasterNet.Dominio.CursoPrecio", b =>
                {
                    b.Property<Guid?>("PrecioId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CursoId")
                        .HasColumnType("TEXT");

                    b.HasKey("PrecioId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("cursos_precios", (string)null);
                });

            modelBuilder.Entity("MasterNet.Dominio.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Apellidos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb5292f7-a313-4d73-ba9d-ac45b34e9742"),
                            Apellidos = "Boyer",
                            Grado = "Global Implementation Associate",
                            Nombre = "Kaelyn"
                        },
                        new
                        {
                            Id = new Guid("3cac5467-1b46-4a34-bcba-83d9927c79ea"),
                            Apellidos = "Bradtke",
                            Grado = "Legacy Creative Strategist",
                            Nombre = "Savannah"
                        },
                        new
                        {
                            Id = new Guid("dc9f6315-97db-4691-bd5d-6a99066ebe7d"),
                            Apellidos = "Hoppe",
                            Grado = "Dynamic Mobility Agent",
                            Nombre = "Ayla"
                        },
                        new
                        {
                            Id = new Guid("0606ca56-39f8-4a62-9ae0-90c36609d183"),
                            Apellidos = "Boyer",
                            Grado = "Central Applications Analyst",
                            Nombre = "Britney"
                        },
                        new
                        {
                            Id = new Guid("aeda7a2f-942c-4568-8665-986ab8bc1d44"),
                            Apellidos = "Carter",
                            Grado = "Central Assurance Assistant",
                            Nombre = "Alfonso"
                        },
                        new
                        {
                            Id = new Guid("78f50087-99c0-4540-89e1-8d0df8954eb9"),
                            Apellidos = "Erdman",
                            Grado = "Chief Mobility Consultant",
                            Nombre = "Lavon"
                        },
                        new
                        {
                            Id = new Guid("7b4262e6-8d28-4c50-8a94-ef01ac041533"),
                            Apellidos = "Kunde",
                            Grado = "Investor Intranet Liaison",
                            Nombre = "Erich"
                        },
                        new
                        {
                            Id = new Guid("10b7e66c-fcbf-44f4-bfab-a7d31ff02eae"),
                            Apellidos = "Sauer",
                            Grado = "District Factors Supervisor",
                            Nombre = "Ada"
                        },
                        new
                        {
                            Id = new Guid("cc484092-5169-4536-a14d-fcdd2c91d5ce"),
                            Apellidos = "Ziemann",
                            Grado = "Human Program Technician",
                            Nombre = "Emile"
                        },
                        new
                        {
                            Id = new Guid("61e23a03-96c4-4086-be80-d474558a0b9b"),
                            Apellidos = "Pfannerstill",
                            Grado = "Senior Applications Administrator",
                            Nombre = "General"
                        });
                });

            modelBuilder.Entity("MasterNet.Dominio.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Imagenes", (string)null);
                });

            modelBuilder.Entity("MasterNet.Dominio.Precio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PrecioActual")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioPromocion")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("precios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("461cee20-e28a-4642-aad0-2d0c1544d532"),
                            Nombre = "Precio Regular",
                            PrecioActual = 10.0m,
                            PrecioPromocion = 8.0m
                        });
                });

            modelBuilder.Entity("MasterNet.Persistencia.Modelos.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Carrera")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "247268af-38d6-4cff-b8dd-e4ae210008b0",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7b737965-25bd-498e-a3ac-0821d3b48cb8",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "CURSO_READ",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "CURSO_UPDATE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "CURSO_WRITE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "CURSO_DELETE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "COMENTARIO_READ",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "COMENTARIO_DELETE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "COMENTARIO_CREATE",
                            RoleId = "247268af-38d6-4cff-b8dd-e4ae210008b0"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "CURSO_READ",
                            RoleId = "7b737965-25bd-498e-a3ac-0821d3b48cb8"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "7b737965-25bd-498e-a3ac-0821d3b48cb8"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "COMENTARIO_READ",
                            RoleId = "7b737965-25bd-498e-a3ac-0821d3b48cb8"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "ClaimPersonalizados",
                            ClaimValue = "COMENTARIO_CREATE",
                            RoleId = "7b737965-25bd-498e-a3ac-0821d3b48cb8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MasterNet.Dominio.Calificacion", b =>
                {
                    b.HasOne("MasterNet.Dominio.Curso", "Curso")
                        .WithMany("Calificaciones")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("MasterNet.Dominio.CursoInstructor", b =>
                {
                    b.HasOne("MasterNet.Dominio.Curso", "Curso")
                        .WithMany("CursoInstructores")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Dominio.Instructor", "Instructor")
                        .WithMany("CursoInstructores")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Dominio.CursoPrecio", b =>
                {
                    b.HasOne("MasterNet.Dominio.Curso", "Curso")
                        .WithMany("CursoPrecios")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Dominio.Precio", "Precio")
                        .WithMany("CursoPrecios")
                        .HasForeignKey("PrecioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Precio");
                });

            modelBuilder.Entity("MasterNet.Dominio.Photo", b =>
                {
                    b.HasOne("MasterNet.Dominio.Curso", "Curso")
                        .WithMany("Photos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MasterNet.Persistencia.Modelos.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MasterNet.Persistencia.Modelos.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Persistencia.Modelos.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MasterNet.Persistencia.Modelos.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterNet.Dominio.Curso", b =>
                {
                    b.Navigation("Calificaciones");

                    b.Navigation("CursoInstructores");

                    b.Navigation("CursoPrecios");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("MasterNet.Dominio.Instructor", b =>
                {
                    b.Navigation("CursoInstructores");
                });

            modelBuilder.Entity("MasterNet.Dominio.Precio", b =>
                {
                    b.Navigation("CursoPrecios");
                });
#pragma warning restore 612, 618
        }
    }
}
